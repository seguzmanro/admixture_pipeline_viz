% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualization.R
\name{execute_pipeline}
\alias{execute_pipeline}
\title{Main Visualization Functions}
\usage{
execute_pipeline(args)
}
\arguments{
\item{args}{List of arguments containing:
\itemize{
  \item{q_file}{Path to single Q file (character)}
  \item{input_dir}{Directory with multiple Q files (character)}
  \item{fam}{Path to PLINK .fam file (character)}
  \item{popmap}{Path to population mapping CSV (character)}
  \item{coords}{Path to coordinates CSV (character)}
  \item{output_dir}{Output directory (character)}
  \item{k_value}{Specific K value to process (integer, optional)}
  \item{log_dir}{Directory with .out files for CV plot (character, optional)}
  \item{dpi}{Resolution for PNG plots (integer)}
  \item{labels}{Add population labels to maps (logical)}
  \item{bbox}{Custom bounding box (list, optional)}
  \item{padding}{Padding for adaptive bbox (numeric)}
  \item{parallel_workers}{Number of parallel workers (integer)}
}}
}
\value{
NULL (invisibly)
}
\description{
This module contains the main workflow functions for creating
ADMIXTURE visualizations.
Main pipeline execution flow
}
\details{
This is the core function that orchestrates the entire ADMIXTURE visualization
pipeline. It processes input files, generates visualizations, and saves outputs
to the specified directory.


The function performs the following steps:
\enumerate{
  \item{Validates and loads input data files}
  \item{Processes Q files (single or batch mode)}
  \item{Generates cross-validation error plots (if log files provided)}
  \item{Creates spatial basemap with elevation, water features, and boundaries}
  \item{Generates admixture bar plots for each K value}
  \item{Creates spatial admixture maps with pie charts}
  \item{Saves session information for reproducibility}
}
}
\examples{
\dontrun{
args <- list(
  q_file = "admixture_results/pop.3.Q",
  fam = "data.fam",
  popmap = "popmap.csv",
  coords = "coordinates.csv",
  output_dir = "results",
  dpi = 300,
  labels = TRUE
)
execute_pipeline(args)
}
}
